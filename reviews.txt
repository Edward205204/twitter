controller chỉ gọi đến service và response về cho client
service thì tập trung sử lý logic và db
Lỗi thì tập trung xử lý ở middleware(4 tham số) cuối cùng và response lỗi về cho client
Các middleware khác hay các hàm chức năng chỉ throw ra lỗi hoặc next(lỗi) đến cho middleware cuối cùng xử lý
Tạo hàm wrapper cho controller để controller hoặc service throw ra lỗi thì vẫn next(lỗi) đến middleware cuối cùng đc
Xử lý và bắt lỗi chặt chẽ ở middleware để dễ sử lý

--------------------------------------------------
#100 - Reset Password
xử lý reset password(sau khi verify reset password token)
- User gửi lên password, confirm_password, và reset_password_token
- đầu tiên cần validate
- tách schema lặp lại để tái sử dụng
- hoàn thiện validate(sửa lại verify reset password để lấy đc user_id sau khi decoded)
- tạo controller
- lấy user_id từ request và gọi vào hàm service
- hàm service sẽ set value (là password) vào db, và set reset_password_token là rỗng + updateAt
- trả về message thông báo đăng ký thành công

#101 - Get User
xử lý get thông tin user sau khi đăng nhập
- Tạo method get, với middleware là accessTokenValidator
- Tạo getMe controller, lấy user_id từ decoded_access_token (middleware accessTokenValidator) và gọi service getMe với tham số là user_id
- Tại getMe service get ra user thông qua user_id rồi return về user(loại trừ field nhạy cảm như password, các token bằng projection mongoDB)

#102 - Thêm schema cho mongoDB(thao tác ở mongoDB compass)

#103 - #104 -#105 - Update Profile của user(dùng PUT or PATCH)
* Note: + Nếu dùng Put thì phải truyền data mới(đc chỉnh sửa hay cập nhật) và cả data cũ, dùng Patch thì chỉ cần truyền lên data đc sửa đổi(cập nhật) thôi
        + Nếu dùng hàm đồng bộ thì chỉ cần throw ra lỗi thì middleware tự động next + Lỗi => nên có thể next or throw ra lỗi đều đc
        + Nếu hàm bất đồng bộ thì phải tự next lỗi => Phải next lỗi nếu như không có wrapper handle error nào bọc bên ngoài

- Sửa signToken -> gắn thêm trạng thái tài khoản vào token để dễ dàng lấy ra check từ token đc gửi lên
- Tạo method PATCH với routes là updateMe(gồm middleware: access token,thêm middleware check status account nếu tài khoản có phải là verify  thì đc thực hiện update nếu chưa thì  next ra Lỗi)
- Tạo middleware validate các field được update bao gồm: (name, date_of_birth, bio, location, website, username, avatar, cover_photo)
- Tạo thêm middleware lọc các dữ liệu thừa(chỉ có name, date_of_birth, bio, location, website, username, avatar, cover_photo là đc pass qua validate này)
- Tạo controller xử lý update tài khoản, lấy data từ req.body và user_id từ access token và truyền vào service xử lý updateMe
- Tạo service nhận user_id và data và update vào db(xử lý bằng method findOneAndUpdates + xử dụng tham số returnNewDocument để nhận collection đc cập nhật vào db và dùng projection để lọc ra dữ liệu nhạy cảm trước khi trả data về)

#107 - Get User Profile
* Note: + Lấy user bằng get và params là username
        + Hiện tại username không đc tạo khi đăng kí và có giá trị là ''
- Tạo username mặc định khi đăng kí tài khoản, user{user_id}
- Tạo routes getProfile user với params là /:username
- Không cần middleware cho api này(không cần đăng nhập để truy cập api)
- Tạo controller gọi vào service getProfile bằng id đc lấy từ params truyền lên server
- lấy profile từ db bằng username, projection các thông tin nhạy cảm trước khi trả về
- return data
- xử lý vấn đề typescript

#108 - #109 -#110 - Follow user and unfollow user
* Follow
- Tạo schema follow, gồm 4 field là user_id, followed_user_id, create_at, _id.
- Tạo routes follow method là post với body là followed_user_id: string.
- Cần verify access token và check verify status của tài khoản
- Tạo middleware để kiểm tra followed_user_id này có hợp lệ hay không(có phải là id đc tạo bởi mongoDB?) và kiểm tra xem người dùng này có tồn tại trong db hay không - tránh follow nullL(middleware này sẽ tái sử dụng ở unfollow nên cần phải trả về lỗi phù hợp để dùng ở cả hai)
- Tạo controller lấy user_id từ decoded_access_token và followed_user_id từ body, gọi service follow
- Tạo service follow nhận user_id và followed_user_id, check xem,user_id đã từng followed_user_id này hay chưa? Nếu có rồi thì return về message đã follow, còn chưa từng follow thì lưu vào db rồi trả về message follow success

* unfollow
- Tạo route với method là delete(/follow/:followed_user_id)
- Sẽ có những middleware như access token, verify account status, dùng lại verify followed_user_id của api Follow

#111 - Change password

- Tạo routes method post với body là current_password, password, confirm_password
- Tạo controller: dùng lại access token, verify account status và thêm controller để check body
- Tạo controller lấy _id của user từ decoded_access_token, sau đó gửi _id và service change_password
- Tạo change_password service để thay đổi password sau đó update và db dựa vào _id 